

<html lang="en">

<head>
    <meta charset="utf-8" />
    <link rel="apple-touch-icon" sizes="76x76" href="./assets/img/apple-icon.png">
    <link rel="icon" type="image/png" href="./assets/img/favicon.png">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  
    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no' name='viewport' />
    <!--     Fonts and icons     -->
    
    
</head>

<body class="index-page">
  
    <div class="wrapper">
        <div class="page-header clear-filter" filter-color="orange">
            <div class="page-header-image" data-parallax="true" style="background-image: ;">
            </div>
            <div class="rellax-header rellax-header-sky" data-rellax-speed="-8">
                <div class="page-header-image" style="background-image: url('./assets/img/ciel/ciel11')">
                </div>
            </div>
            <div class="rellax-header rellax-header-buildings" data-rellax-speed="0">
                <div class="page-header-image page-header-city" style="background-image: url('./assets/img/sol/newyork2.png')">
                </div>
            </div>
            <div class="rellax-text-container">
                <h1 class="h1-seo rellax-text" data-rellax-speed="-2">Carbon print</h1>
            </div>

            <h3 class="h3-description rellax-text" data-rellax-speed="-1">Recherche ton produit :
            <form class="search-container" method="get" action="">
                  <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Quel objet souhaitez vous analyser ?">
                                    <div class="input-group-append">
                                        <a href="/" class="input-group-text"><i class="now-ui-icons ui-1_zoom-bold"></i></a>
                                    </div>
                  </div>     
                           
                
              </form>
              
            </h3>

                      <!--     Button search     -->
            <h3 class="h2-description rellax-text" style="color:white" class="category category-absolute " data-rellax-speed="-2"><%= @tips %>

               
          
             
             
          </h3>
        </div></form></h3></div>
        <!--   End Button search     -->









<!--<div class="container">
<table class="table">
  <thead>
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Description</th>
      <th scope="col">Price</th>
      <th scope="col">Condition</th>
      <th scope="col">Delete</i><th>
      <th scope="">
    </tr>
  </thead>
  <tbody>

<%@product.each do |item|%>
    <tr>
      <td><%= item.title %></td>
      <td><%= item.description %></td>
      <td><%= item.price %></td>
    </tr>
    <tr>
  </tbody>
</table>
</div>


</body>




<%end%>
<h2>Autocomplete</h2>

<p>Start typing:</p>



<!--Make sure the form has the autocomplete function switched off:-->
<!--<div style='margin-bottom: 100px'>
  <%# <%= p = Product.find_by() %> 
    <form id="search-form" autocomplete="off" action="product/1">
  <div class="autocomplete" style="width:300px;">
    <input id="myInput" type="text" name="myCountry" placeholder="Country">
  </div>

  <input type="submit">
</form>
</div>
<%# <%= link_to "Test", new_product_foot_print_path %>

<%= javascript_tag do%>
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

/*An array containing all the country names in the world:*/

 <%@list = []%>
<% @product.each do |e| %>
  <% @list << e.title   %>
<% end %>
var countries =  <%= @list.inspect.html_safe %>
<!-- fund by jiad, for display the array of ruby into js -->

<!var src = document.getElementById("search-form")


console.log("hhjhjh")
console.log(src.action.innerHTML="<%=  %>")



/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
autocomplete(document.getElementById("myInput"), countries);
<%end%>
</tr></tbody></th></th></th></tr></thead></table></div></h6></div></div></body></html>
